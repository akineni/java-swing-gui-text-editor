/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package root;

import java.awt.Desktop;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.CaretEvent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;


/**
 *
 * @author Oseghale Ruth
 */
public class Notepad extends javax.swing.JFrame {
    
    private boolean saved;
    
    /**
     * Used by Thread2 with disableUndoRedoWhenNew() as a notification 
     * to disable Undo and redo menu items.
     * <p>The method sets the new_file_notification property to false immediately</p>
     */
    private boolean new_file_notification;
    
    /**
     * Tells the currently opened file
     * When new_file_notification, sets this property to "Untitled"
     * It changes when a file is saved and opened
     */
    private File currentFile;
    
    private Font currentFont;
    
    private UndoManager undoManager;
   
    private final UndoAction undoAction = new UndoAction();
    private final RedoAction redoAction = new RedoAction();
    
    private Properties user_prefs;
    private final NotepadUndoableEditListener notepadUndoableEditListener = new NotepadUndoableEditListener();
    
    /**
     * Creates new form Notepad
     */
    public Notepad() {
        initComponents();
        initComponents2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jFileChooser1 = new javax.swing.JFileChooser();
        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        pnl_StatusBar = new javax.swing.JPanel();
        lbl_Status = new javax.swing.JLabel();
        lbl_SavedStatus = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnu_New = new javax.swing.JMenuItem();
        mnu_Open = new javax.swing.JMenuItem();
        mnu_Save = new javax.swing.JMenuItem();
        mnu_Save_As = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnu_Pg_Setup = new javax.swing.JMenuItem();
        mnu_Print = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnu_Exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mnu_Undo = new javax.swing.JMenuItem();
        mnu_Redo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        mnu_Cut = new javax.swing.JMenuItem();
        mnu_Copy = new javax.swing.JMenuItem();
        mnu_Paste = new javax.swing.JMenuItem();
        mnu_Del = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        mnu_Find = new javax.swing.JMenuItem();
        mnu_FindNext = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        mnu_Goto = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        mnu_Select_All = new javax.swing.JMenuItem();
        mnu_Time_Date = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mnu_WordWrap = new javax.swing.JCheckBoxMenuItem();
        mnu_Font = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        mnu_StatusBar = new javax.swing.JCheckBoxMenuItem();
        jMenu5 = new javax.swing.JMenu();
        mnu_Help = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        mnu_About = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        jMenuItem5.setText("jMenuItem5");

        jMenuItem7.setText("jMenuItem7");

        jMenuItem8.setText("jMenuItem8");

        jMenuItem9.setText("jMenuItem9");

        jMenuItem10.setText("jMenuItem10");

        jMenuItem11.setText("jMenuItem11");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenu6.setText("jMenu6");

        jMenu7.setText("jMenu7");

        jDialog1.setTitle("EasyEdit - About");
        jDialog1.setModal(true);
        jDialog1.setResizable(false);

        jLabel1.setText("<html><h2>CSC208: Introduction to JAVA programming</h2></html>");

        jLabel2.setText("<html><b>Name</b></html>");

        jLabel3.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jLabel3.setText("Oseghale Ruth Onoseremen");

        jLabel4.setText("<html><b>Matric number</b></html>");

        jLabel5.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jLabel5.setText("150502019");

        jLabel6.setText("<html><b>Department</b></html>");

        jLabel7.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jLabel7.setText("Computer Science");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("<html><center><h2 style=\"margin-bottom:5px;padding-bottom: 5px;\"><span style=\"color:#ff6464;\">Easy</span><span style=\"color:#0f0;\">Edit</span></h2></center>\nCopyright &copy; oseghaleruth 2017\n</html>");

        jLabel9.setFont(new java.awt.Font("Magneto", 0, 18)); // NOI18N
        jLabel9.setText("Javany");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8)
                    .addComponent(jLabel1)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
        );

        jDialog1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7});

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("EasyEdit - Untitled");
        setMinimumSize(new java.awt.Dimension(348, 547));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout pnl_StatusBarLayout = new javax.swing.GroupLayout(pnl_StatusBar);
        pnl_StatusBar.setLayout(pnl_StatusBarLayout);
        pnl_StatusBarLayout.setHorizontalGroup(
            pnl_StatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_StatusBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_SavedStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_Status, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnl_StatusBarLayout.setVerticalGroup(
            pnl_StatusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_StatusBarLayout.createSequentialGroup()
                .addComponent(lbl_Status, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(lbl_SavedStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenu1.setMnemonic('f');
        jMenu1.setText("File");

        mnu_New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnu_New.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\new.png")); // NOI18N
        mnu_New.setMnemonic('n');
        mnu_New.setText("New");
        mnu_New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_NewActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_New);

        mnu_Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Open.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\open.png")); // NOI18N
        mnu_Open.setMnemonic('o');
        mnu_Open.setText("Open");
        mnu_Open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_OpenActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_Open);

        mnu_Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Save.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\save.png")); // NOI18N
        mnu_Save.setMnemonic('s');
        mnu_Save.setText("Save");
        mnu_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_SaveActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_Save);

        mnu_Save_As.setMnemonic('A');
        mnu_Save_As.setText("Save As");
        mnu_Save_As.setDisplayedMnemonicIndex(5);
        mnu_Save_As.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_Save_AsActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_Save_As);
        jMenu1.add(jSeparator2);

        mnu_Pg_Setup.setMnemonic('u');
        mnu_Pg_Setup.setText("Page Setup");
        mnu_Pg_Setup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_Pg_SetupActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_Pg_Setup);

        mnu_Print.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Print.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\print.png")); // NOI18N
        mnu_Print.setMnemonic('p');
        mnu_Print.setText("Print");
        mnu_Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_PrintActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_Print);
        jMenu1.add(jSeparator1);

        mnu_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mnu_Exit.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\exit.gif")); // NOI18N
        mnu_Exit.setMnemonic('x');
        mnu_Exit.setText("Exit");
        mnu_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_ExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnu_Exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('e');
        jMenu2.setText("Edit");

        mnu_Undo.setAction(undoAction);
        mnu_Undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Undo.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\undo.png")); // NOI18N
        jMenu2.add(mnu_Undo);

        mnu_Redo.setAction(redoAction);
        mnu_Redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Redo.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\redo.png")); // NOI18N
        jMenu2.add(mnu_Redo);
        jMenu2.add(jSeparator3);

        mnu_Cut.setAction(new DefaultEditorKit.CutAction());
        mnu_Cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Cut.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\cut.png")); // NOI18N
        mnu_Cut.setText("Cut");
        mnu_Cut.setEnabled(false);
        jMenu2.add(mnu_Cut);

        mnu_Copy.setAction(new DefaultEditorKit.CopyAction());
        mnu_Copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Copy.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\copy.png")); // NOI18N
        mnu_Copy.setText("Copy");
        mnu_Copy.setEnabled(false);
        jMenu2.add(mnu_Copy);

        mnu_Paste.setAction(new DefaultEditorKit.PasteAction());
        mnu_Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Paste.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\paste.png")); // NOI18N
        mnu_Paste.setText("Paste");
        mnu_Paste.setEnabled(false);
        jMenu2.add(mnu_Paste);

        mnu_Del.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        mnu_Del.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\delete.gif")); // NOI18N
        mnu_Del.setText("Delete");
        mnu_Del.setEnabled(false);
        mnu_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_DelActionPerformed(evt);
            }
        });
        jMenu2.add(mnu_Del);
        jMenu2.add(jSeparator4);

        mnu_Find.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Find.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\find.png")); // NOI18N
        mnu_Find.setText("Find");
        mnu_Find.setEnabled(false);
        jMenu2.add(mnu_Find);

        mnu_FindNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        mnu_FindNext.setText("Find Next");
        mnu_FindNext.setEnabled(false);
        jMenu2.add(mnu_FindNext);

        jMenuItem22.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem22.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Documents\\NetBeansProjects\\notepadProject\\img\\replace.png")); // NOI18N
        jMenuItem22.setText("Replace");
        jMenu2.add(jMenuItem22);

        mnu_Goto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Goto.setText("Go To...");
        mnu_Goto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_GotoActionPerformed(evt);
            }
        });
        jMenu2.add(mnu_Goto);
        jMenu2.add(jSeparator5);

        mnu_Select_All.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        mnu_Select_All.setText("Select All");
        mnu_Select_All.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_Select_AllActionPerformed(evt);
            }
        });
        jMenu2.add(mnu_Select_All);

        mnu_Time_Date.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        mnu_Time_Date.setText("Time/Date");
        mnu_Time_Date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_Time_DateActionPerformed(evt);
            }
        });
        jMenu2.add(mnu_Time_Date);

        jMenuBar1.add(jMenu2);

        jMenu3.setMnemonic('o');
        jMenu3.setText("Format");

        mnu_WordWrap.setMnemonic('w');
        mnu_WordWrap.setText("Word Wrap");
        jMenu3.add(mnu_WordWrap);

        mnu_Font.setMnemonic('f');
        mnu_Font.setText("Font...");
        mnu_Font.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_FontActionPerformed(evt);
            }
        });
        jMenu3.add(mnu_Font);

        jMenuBar1.add(jMenu3);

        jMenu4.setMnemonic('v');
        jMenu4.setText("View");

        mnu_StatusBar.setMnemonic('s');
        mnu_StatusBar.setText("Status Bar");
        jMenu4.add(mnu_StatusBar);

        jMenuBar1.add(jMenu4);

        jMenu5.setMnemonic('h');
        jMenu5.setText("Help");

        mnu_Help.setMnemonic('h');
        mnu_Help.setText("View Help");
        mnu_Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_HelpActionPerformed(evt);
            }
        });
        jMenu5.add(mnu_Help);
        jMenu5.add(jSeparator6);

        mnu_About.setMnemonic('a');
        mnu_About.setText("About EasyEdit");
        mnu_About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnu_AboutActionPerformed(evt);
            }
        });
        jMenu5.add(mnu_About);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
            .addComponent(pnl_StatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(pnl_StatusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnu_GotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_GotoActionPerformed
        Object input = JOptionPane.showInputDialog(this, "Line Number", "Go To Line", JOptionPane.PLAIN_MESSAGE, 
                null, null, getStandardCurrentLine());
        
        if(input != null && validateInput(input)) {
            Integer index = Integer.valueOf((String)input);
            if(index <= jTextArea1.getLineCount()) {
                jTextArea1.setCaretPosition(jTextArea1.getDocument().getDefaultRootElement()
                        .getElement(index-1).getStartOffset());
            }else {
                JOptionPane.showMessageDialog(this, "The line number is beyond the total number of lines",
                        "Easy Note - Goto Line", JOptionPane.ERROR_MESSAGE);
            }
        }else if (input != null && !validateInput(input)){
            JOptionPane.showMessageDialog(this, "Invalid number for line number",
                        "Easy Note - Goto Line", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mnu_GotoActionPerformed

    private void mnu_Select_AllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_Select_AllActionPerformed
        jTextArea1.selectAll();
    }//GEN-LAST:event_mnu_Select_AllActionPerformed

    private void mnu_OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_OpenActionPerformed
        
        int confirmationResult = 3, selected = 3;
        
        if(!saved) {
            
            int reply = JOptionPane.showConfirmDialog(this, "Do you want to save changes to "
                    + ((currentFile == null) ? "Untitled" : currentFile.getName()) + "?", "EasyEdit",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if(reply == JOptionPane.YES_OPTION) {
                if(currentFile == null) {
                    
                    while(confirmationResult != JOptionPane.YES_OPTION){
                        
                        selected = jFileChooser1.showSaveDialog(this);
                        if (selected == JFileChooser.CANCEL_OPTION) break;
                        if(selected == JFileChooser.APPROVE_OPTION) {
                            File filename = jFileChooser1.getSelectedFile();
                            if(filename.exists()) {
                                confirmationResult = JOptionPane.showConfirmDialog(this, 
                                        filename.getName() + " already exists\nDo you want to replace it?", 
                                        "Confirm Save As", JOptionPane.YES_NO_OPTION);
                                if(confirmationResult == JOptionPane.YES_OPTION) {
                                    saveFile(filename);
                                    processOpen();
                                }
                            } else {
                                saveFile(filename);
                                processOpen();
                                break;
                            }
                        }
                        
                    }
                }else {
                    quickSave(currentFile);
                    processOpen();
                }
            }else if(reply == JOptionPane.NO_OPTION){
                processOpen();
            }
        }else {
            processOpen();
        }
        
        
    }//GEN-LAST:event_mnu_OpenActionPerformed

    private void mnu_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_SaveActionPerformed
        if(currentFile == null || (currentFile == null && !saved)) {
            mnu_Save_AsActionPerformed(evt);
        }else {
            quickSave(currentFile);
        }
    }//GEN-LAST:event_mnu_SaveActionPerformed

    private void mnu_Save_AsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_Save_AsActionPerformed
        int selected = jFileChooser1.showSaveDialog(this);
        if(selected == JFileChooser.APPROVE_OPTION) {
            File filename = jFileChooser1.getSelectedFile();
            int confirmationResult;
            if(filename.exists()) {
                confirmationResult = JOptionPane.showConfirmDialog(this,
                        filename.getName() + " already exists\nDo you want to replace it?");
                if(confirmationResult == JOptionPane.YES_OPTION) {
                    saveFile(filename);                        
                }
            } else {
                saveFile(filename);
            }
        }
    }//GEN-LAST:event_mnu_Save_AsActionPerformed

    private void mnu_NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_NewActionPerformed

        int confirmationResult = 3, selected = 3;
        
        if(!saved) {
            
            int reply = JOptionPane.showConfirmDialog(this, "Do you want to save changes to "
                    + ((currentFile == null) ? "Untitled" : currentFile.getName()) + "?", "EasyEdit",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if(reply == JOptionPane.YES_OPTION) {
                if(currentFile == null) {
                    
                    while(confirmationResult != JOptionPane.YES_OPTION){
                        
                        selected = jFileChooser1.showSaveDialog(this);
                        if (selected == JFileChooser.CANCEL_OPTION) break;
                        if(selected == JFileChooser.APPROVE_OPTION) {
                            File filename = jFileChooser1.getSelectedFile();
                            if(filename.exists()) {
                                confirmationResult = JOptionPane.showConfirmDialog(this, 
                                        filename.getName() + " already exists\nDo you want to replace it?", 
                                        "Confirm Save As", JOptionPane.YES_NO_OPTION);
                                if(confirmationResult == JOptionPane.YES_OPTION) {
                                    saveFile(filename);
                                    newFile();
                                }
                            } else {
                                saveFile(filename);
                                newFile();
                                break;
                            }
                        }
                        
                    }
                }else {
                    quickSave(currentFile);
                    newFile();
                }
            }else if(reply == JOptionPane.NO_OPTION){
                newFile();
            }
        }else {
            newFile();
        }
        
        
        
    }//GEN-LAST:event_mnu_NewActionPerformed

    private void mnu_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_ExitActionPerformed
       windowClosingEvent();
    }//GEN-LAST:event_mnu_ExitActionPerformed

    private void mnu_PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_PrintActionPerformed
        try {
            jTextArea1.print();
        } catch (PrinterException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnu_PrintActionPerformed

    private void mnu_Pg_SetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_Pg_SetupActionPerformed
        format = pj.pageDialog(pj.defaultPage());
    }//GEN-LAST:event_mnu_Pg_SetupActionPerformed

    private void mnu_Time_DateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_Time_DateActionPerformed
        DateFormat df = new SimpleDateFormat("HH:mm:ss a dd/MM/yyyy");
        jTextArea1.insert(df.format(new Date()), jTextArea1.getCaretPosition());
    }//GEN-LAST:event_mnu_Time_DateActionPerformed

    private void mnu_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_DelActionPerformed
        jTextArea1.replaceSelection("");
    }//GEN-LAST:event_mnu_DelActionPerformed

    private void mnu_AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_AboutActionPerformed
        jDialog1.pack();
        jDialog1.setLocationRelativeTo(this);
        jDialog1.setVisible(true); 
    }//GEN-LAST:event_mnu_AboutActionPerformed

    private void mnu_HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_HelpActionPerformed
        try {
            browse(new URI("readme.html"));
        } catch (URISyntaxException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            //Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
            
            JOptionPane.showMessageDialog(this, "Unable to open help file\n" + ex.getMessage(), "EasyEdit",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mnu_HelpActionPerformed

    private void mnu_FontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnu_FontActionPerformed
        int option = fontChooser.showDialog(this);
        if(option == JFontChooser.OK_OPTION) {
            currentFont = fontChooser.getSelectedFont();
            jTextArea1.setFont(currentFont);
            fontChooser.setSelectedFont(currentFont);
            
            user_prefs.setProperty("font_family", currentFont.getFamily());
            user_prefs.setProperty("font_style", String.valueOf(currentFont.getStyle()));
            user_prefs.setProperty("font_size", String.valueOf(currentFont.getSize()));
        }
    }//GEN-LAST:event_mnu_FontActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException 
                | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Notepad().setVisible(true);
        });
    }
    
    private boolean validateInput(Object input) {
        try {
            Integer n = Integer.valueOf((String)input);
            return true;
        }catch(NumberFormatException ex) {
            return false;
        }
    }
    
    
    private void openFile(File filename) {
        try {
            FileReader reader = new FileReader(filename);
            jTextArea1.read(reader, null);
            
            currentFile = filename;
            saved = true;
            new_file_notification = true;
            
            updateLblSavedStatus(true);
            setTitle("EasyEdit - " + filename.getAbsolutePath());
        } catch (IOException err) {
            
        }
    }
    
    private void processOpen() {
        int selected = jFileChooser1.showOpenDialog(this);
        if(selected == JFileChooser.APPROVE_OPTION) {
            File sel_file = jFileChooser1.getSelectedFile();
            openFile(sel_file);
            
            updateStatus();
            jTextArea1.getDocument().addUndoableEditListener(notepadUndoableEditListener);
            jTextArea1.getDocument().addDocumentListener(new CustomDocumentListener());
        }
    }
    
    private void quickSave(File filename) {
        try {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
                writer.write(jTextArea1.getText());
            }
            saved = true;
            updateLblSavedStatus(true);
        } catch (IOException err) {
        
        }
    }
    
    private void saveFile(File filename) {
        try {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
                writer.write(jTextArea1.getText());
            }
            saved = true;

            // current file might change here, when user specifies a 
            // new name for file in dialog
            
            currentFile = filename;
            
            setTitle("EasyEdit - " + filename.getAbsolutePath());
            updateLblSavedStatus(true);
        } catch (IOException err) {
        }
    }
    
    private void newFile() {
        jTextArea1.setText("");
        currentFile = null;
        saved = true;
        new_file_notification = true;

        setTitle("EasyEdit - Untitled");
        updateLblSavedStatus(true);
    }
    
    private void disableUndoRedoWhenNew(){
        if(new_file_notification) {
            undoManager.discardAllEdits();
            mnu_Undo.getAction().setEnabled(false);
            mnu_Redo.getAction().setEnabled(false);
            new_file_notification = false;
        }
    }
    
    private void initComponents2() {
        
        fontChooser = new JFontChooser();
        user_prefs = new Properties();
        undoManager = new UndoManager();
        pj = PrinterJob.getPrinterJob();
        Thread2 thread2 = new Thread2("Thread2");
        
        newFile();
        updateStatus();
        pnl_StatusBar.setVisible(false);
        thread2.start();
        jFileChooser1.addChoosableFileFilter(new TextFilter());
        jTextArea1.getDocument().addUndoableEditListener(notepadUndoableEditListener);
        jTextArea1.getDocument().addDocumentListener(new CustomDocumentListener());
        
        mnu_StatusBar.addItemListener((ItemEvent e) -> {
            if(mnu_StatusBar.isSelected())
                pnl_StatusBar.setVisible(true);
            else
                pnl_StatusBar.setVisible(false);
            
            user_prefs.setProperty("status_bar", Boolean.toString(mnu_StatusBar.isSelected()));
        });
        
        mnu_WordWrap.addItemListener((ItemEvent e) -> {
            if(mnu_WordWrap.isSelected()) {
                jTextArea1.setWrapStyleWord(true); 
                jTextArea1.setLineWrap(true);
            }else {
                jTextArea1.setWrapStyleWord(false);
                jTextArea1.setLineWrap(false);
            }
            
            user_prefs.setProperty("word_wrap", Boolean.toString(mnu_WordWrap.isSelected()));
        });
        
        jTextArea1.addCaretListener((CaretEvent e) -> {
            // Toggle Cut, Copy and Delete menu items on selection
            
            if(jTextArea1.getSelectedText() != null) {
                mnu_Cut.setEnabled(true);
                mnu_Copy.setEnabled(true);
                mnu_Del.setEnabled(true);
            }else {
                mnu_Cut.setEnabled(false);
                mnu_Copy.setEnabled(false);
                mnu_Del.setEnabled(false);
            }
            
            updateStatus();
        });

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                windowClosingEvent();
            }
        });
        
        
        
        
        try {
            FileInputStream in = new FileInputStream("userprefs");
            try {
                user_prefs.load(in);
                in.close();
                mnu_StatusBar.setSelected(Boolean.parseBoolean(user_prefs.getProperty("status_bar","false")));
                mnu_WordWrap.setSelected(Boolean.parseBoolean(user_prefs.getProperty("word_wrap","false")));
                
                String font_family = user_prefs.getProperty("font_family", "Lucida Console");
                int font_style = Integer.parseInt(user_prefs.getProperty("font_style", "0"));
                int font_size = Integer.parseInt(user_prefs.getProperty("font_size", "14"));
                currentFont = new Font(font_family, font_style, font_size);
                jTextArea1.setFont(currentFont);
                fontChooser.setSelectedFont(currentFont);
                
            } catch (IOException ex) {
                Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println(ex.getMessage());
        }
    }
    
    private void windowClosingEvent() {
        try {
            if(!user_prefs.isEmpty()){
                FileOutputStream out = new FileOutputStream("userprefs");
                try {

                    user_prefs.store(out, "USER PREFERENCES");
                    out.close();
                } catch (IOException ex) {
                    Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        int confirmationResult = 3, selected = 3;
        
        if(!saved) {
            
            int reply = JOptionPane.showConfirmDialog(this, "Do you want to save changes to "
                    + ((currentFile == null) ? "Untitled" : currentFile.getName()) + "?", "EasyEdit",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if(reply == JOptionPane.YES_OPTION) {
                if(currentFile == null) {
                    
                    while(confirmationResult != JOptionPane.YES_OPTION){
                        
                        selected = jFileChooser1.showSaveDialog(this);
                        if (selected == JFileChooser.CANCEL_OPTION) break;
                        if(selected == JFileChooser.APPROVE_OPTION) {
                            File filename = jFileChooser1.getSelectedFile();
                            if(filename.exists()) {
                                confirmationResult = JOptionPane.showConfirmDialog(this, 
                                        filename.getName() + " already exists\nDo you want to replace it?", 
                                        "Confirm Save As", JOptionPane.YES_NO_OPTION);
                                if(confirmationResult == JOptionPane.YES_OPTION) {
                                    saveFile(filename);
                                    System.exit(0);
                                }
                            } else {
                                saveFile(filename);
                                System.exit(0);
                            }
                        }
                        
                    }
                }else {
                    quickSave(currentFile);
                    System.exit(0);
                }
            }else if(reply == JOptionPane.NO_OPTION){
                System.exit(0);
            }
        }else {
            System.exit(0);
        }
    }
    
    
    private void browse(URI uri) throws IOException {
        Desktop desktop = Desktop.isDesktopSupported()?Desktop.getDesktop():null;
        if(desktop != null) {
            if(desktop.isSupported(Desktop.Action.BROWSE)) {
                desktop.browse(uri);
            }
        }
    }
    
    
    private void enableFindMenus() {
        //toggle find and find next menu
        if(jTextArea1.getText().length() > 0) {
            mnu_Find.setEnabled(true);
            mnu_FindNext.setEnabled(true);
        }else {
            mnu_Find.setEnabled(false);
            mnu_FindNext.setEnabled(false);
        }
    }
    
    private void updateStatus() {
        String lbl_Status_Text = " Ln: " + getStandardCurrentLine() + ", Col: " + getStandardCurrentColumn();
                lbl_Status_Text += ", Ln count: " + jTextArea1.getLineCount();
                lbl_Status.setText(lbl_Status_Text);
    }
    
    private int getCurrentLine() {
        int line_num = 1;
        int caret_pos = jTextArea1.getCaretPosition();
        try {
            line_num = jTextArea1.getLineOfOffset(caret_pos);
        } catch (BadLocationException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        }
        return line_num;
    }
    
    private int getStandardCurrentLine() {
        return getCurrentLine() + 1;
    }
    
    
    private int getCurrentColumn() {
        int column_num = 1;
        int caret_pos = jTextArea1.getCaretPosition();
        
        try {
            column_num = caret_pos - jTextArea1.getLineStartOffset(getCurrentLine());
        } catch (BadLocationException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return column_num;
    }
    
    private int getStandardCurrentColumn() {
        return getCurrentColumn() + 1;
    }
    
    private void updateLblSavedStatus(boolean saved) {
        if(saved) {
            lbl_SavedStatus.setText("");
            lbl_SavedStatus.setIcon(new ImageIcon(""));
        }else{
            lbl_SavedStatus.setText("Unsaved");
            lbl_SavedStatus.setIcon(new ImageIcon("img/delete.gif"));
        }
          
    }
    
    
    //classes
    
    
    class NotepadUndoableEditListener implements UndoableEditListener {

        @Override
        public void undoableEditHappened(UndoableEditEvent e) {
            undoManager.addEdit(e.getEdit());
            undoAction.updateUndoState();
            redoAction.updateRedoState();
        }
    
    }
    
    class UndoAction extends AbstractAction {
        
        public UndoAction() {
            super("Undo");
            setEnabled(false);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            
            try {
                undoManager.undo();
            }catch(CannotUndoException ex) {
            }
            
            updateUndoState();
            redoAction.updateRedoState();
            
        }

        protected void updateUndoState() {
            if (undoManager.canUndo())
                setEnabled(true);
            else
                setEnabled(false);
        }
    }
    
    
    
    class RedoAction extends AbstractAction {
        public RedoAction() {
            super("Redo");
            setEnabled(false);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                undoManager.redo();
            }catch(CannotRedoException ex) {   
            }
            updateRedoState();
            undoAction.updateUndoState();
            
        }

        protected void updateRedoState() {
            if (undoManager.canRedo())
                setEnabled(true);
            else
                setEnabled(false);
        }
    }
    
    
    
    
    
    class Thread2 extends Thread {
        
        public Thread2(String name) {
            super(name);
        }
    
        @Override
        public void run() {
            while(Thread2.this.isAlive()) {
                initPaste();
                disableUndoRedoWhenNew();
                enableFindMenus();
            }
        }


        public void initPaste() {

            // Get clipboard data
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            String clipboard_data = null;
            Transferable contents = null;
            try {
                contents = clipboard.getContents(null);
            }catch(IllegalStateException ex) {
                System.err.println(ex.getMessage());
            }
            
            boolean hasTransferableText = contents != null && contents.isDataFlavorSupported(DataFlavor.stringFlavor);
            if(hasTransferableText) {
                try {
                    clipboard_data = (String)contents.getTransferData(DataFlavor.stringFlavor);
                } catch (UnsupportedFlavorException | IOException ex) {
                    Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            if(clipboard_data == null)
               mnu_Paste.setEnabled(false);
            else
                mnu_Paste.setEnabled(true);

        }
    
    
    }
    
    
    class CustomDocumentListener implements DocumentListener {
        
            @Override
            public void insertUpdate(DocumentEvent e) {
                saved = false;
                updateLblSavedStatus(false);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                saved = false;
                updateLblSavedStatus(false);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                saved = false;
                updateLblSavedStatus(false);
            }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lbl_SavedStatus;
    private javax.swing.JLabel lbl_Status;
    private javax.swing.JMenuItem mnu_About;
    private javax.swing.JMenuItem mnu_Copy;
    private javax.swing.JMenuItem mnu_Cut;
    private javax.swing.JMenuItem mnu_Del;
    private javax.swing.JMenuItem mnu_Exit;
    private javax.swing.JMenuItem mnu_Find;
    private javax.swing.JMenuItem mnu_FindNext;
    private javax.swing.JMenuItem mnu_Font;
    private javax.swing.JMenuItem mnu_Goto;
    private javax.swing.JMenuItem mnu_Help;
    private javax.swing.JMenuItem mnu_New;
    private javax.swing.JMenuItem mnu_Open;
    private javax.swing.JMenuItem mnu_Paste;
    private javax.swing.JMenuItem mnu_Pg_Setup;
    private javax.swing.JMenuItem mnu_Print;
    private javax.swing.JMenuItem mnu_Redo;
    private javax.swing.JMenuItem mnu_Save;
    private javax.swing.JMenuItem mnu_Save_As;
    private javax.swing.JMenuItem mnu_Select_All;
    private javax.swing.JCheckBoxMenuItem mnu_StatusBar;
    private javax.swing.JMenuItem mnu_Time_Date;
    private javax.swing.JMenuItem mnu_Undo;
    private javax.swing.JCheckBoxMenuItem mnu_WordWrap;
    private javax.swing.JPanel pnl_StatusBar;
    // End of variables declaration//GEN-END:variables

    private PrinterJob pj;
    private PageFormat format;
    private JFontChooser fontChooser;
}